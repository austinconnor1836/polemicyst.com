// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  stripeCustomerId    String?
  subscriptionPlan    String               @default("free") // 'free', 'pro', etc.
  image               String?
  accounts            Account[]
  sessions            Session[]
  videos              Video[]
  templatePreferences TemplatePreferences?
  videoFeeds          VideoFeed[]
  feedVideos          FeedVideo[]
}

model TemplatePreferences {
  id                String @id @default(uuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  facebookTemplate  String
  instagramTemplate String
  youtubeTemplate   String
  sharedPostscript  String
}

model Video {
  id                  String   @id @default(uuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName            String?
  s3Url               String?
  s3Key               String?
  videoTitle          String
  sharedDescription   String
  facebookTemplate    String
  instagramTemplate   String
  youtubeTemplate     String
  blueskyTemplate     String
  twitterTemplate     String
  transcript          String?
  approvedForSplicing Boolean  @default(false)
  createdAt           DateTime @default(now())

  // âœ… Clip relationship (self-referencing)
  sourceVideo   Video?  @relation("ClipSource", fields: [sourceVideoId], references: [id])
  sourceVideoId String?

  generatedClips Video[] @relation("ClipSource")
}

model VideoFeed {
  id              String    @id @default(cuid())
  name            String
  sourceUrl       String
  sourceType      String
  pollingInterval Int
  lastCheckedAt   DateTime?
  lastVideoId     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  feedVideos FeedVideo[]
}

model FeedVideo {
  id             String    @id @default(uuid())
  feedId         String
  feed           VideoFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  videoId        String
  title          String
  s3Url          String
  transcript     String?
  transcriptJson Json?
  createdAt      DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([feedId, videoId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensures unique provider+accountId
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
